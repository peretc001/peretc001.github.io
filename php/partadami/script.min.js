window.addEventListener("DOMContentLoaded", function() {
    var nav = document.querySelector('.nav');
    var navBtn = document.querySelector('.navbar-toggler');
    navOpen = false;
    navBtn.addEventListener('click', function(e) {
        function disableScrolling(){
            var x=window.scrollX;
            var y=window.scrollY;
            window.onscroll=function(){window.scrollTo(x, y);};
        }

        function enableScrolling(){
            window.onscroll=function(){};
        }
        var catalog = document.querySelector('.nav-catalog');
        if(navOpen === false) {
            catalog.classList.add('in');
            navBtn.classList.add('is-active');
            setTimeout(() => {
                catalog.classList.remove('in');
                catalog.classList.add('active');
            }, 300);
            disableScrolling();
            navOpen = true;
        } else {
            catalog.classList.add('out');
            navBtn.classList.remove('is-active');
            setTimeout(() => {
                catalog.classList.remove('out');
                catalog.classList.remove('active');
            }, 300);
            enableScrolling();
            navOpen = false;
        }
    });

    //Modal Callbackvar modal = document.querySelector('.modal');
    let closeBtn = document.querySelector('.close_modal');
    let modalBtn = document.querySelector('.myModal');

    function openModal() {
        modal.classList.add('show');
    };
    function closeModal() {
        modal.classList.remove('show');
    };
    modalBtn.addEventListener('click', (e) => {
        e.preventDefault();
        openModal();
    })
    modal.addEventListener('click', function(e) {
        if(e.target.classList.contains('modal') || e.target === closeBtn) {
            closeModal();
        }
    });
    document.addEventListener('keydown', function(evt) {
        if (evt.keyCode === 27) {
            closeModal();
        }
    });

    let form = document.querySelectorAll('.callback__form');
    form.forEach(item => {
    let formBtn = item.querySelector('.callback__form__button');
    let checkBtn = item.querySelector('.circle-loader');
    let complete = item.querySelector('.checkmark');

    formBtn.disabled = true;
    checkBtn.addEventListener('click', () => {
        checkBtn.classList.add('load-complete');
        checkBtn.style.cursor = 'auto';
        complete.style.display = 'block';
    
        item.action = '/thankyou.php';
        var input = document.createElement("input");
        input.setAttribute("type", "hidden");
        input.setAttribute("name", "human");
        input.setAttribute("value", "human");
        item.appendChild(input);
        formBtn.disabled = false;
    });
    });

    //Phone mask
    [].forEach.call( document.querySelectorAll('.tel'), function(input) {
        var keyCode;
        function mask(event) {
            event.keyCode && (keyCode = event.keyCode);
            var pos = this.selectionStart;
            if (pos < 3) event.preventDefault();
            var matrix = "+7 (___) ___ ____",
                i = 0,
                def = matrix.replace(/\D/g, ""),
                val = this.value.replace(/\D/g, ""),
                new_value = matrix.replace(/[_\d]/g, function(a) {
                    return i < val.length ? val.charAt(i++) || def.charAt(i) : a;
                });
            i = new_value.indexOf("_");
            if (i != -1) {
                i < 5 && (i = 3);
                new_value = new_value.slice(0, i);
            }
            var reg = matrix.substr(0, this.value.length).replace(/_+/g,
                function(a) {
                    return "\\d{1," + a.length + "}"
                }).replace(/[+()]/g, "\\$&");
            reg = new RegExp("^" + reg + "$");
            if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;
            if (event.type == "blur" && this.value.length < 5)  this.value = "";
        }
    
        input.addEventListener("input", mask, false);
        input.addEventListener("focus", mask, false);
        input.addEventListener("blur", mask, false);
        input.addEventListener("keydown", mask, false);
    });
});

$('#add').submit(function(e){
    e.preventDefault();
    var m_method=$(this).attr('method');
    var m_action=$(this).attr('action');
    var m_data=$(this).serialize();
    $.ajax({
        type: m_method,
        url: m_action,
        data: m_data,
        success: function(result){
            Swal.fire({
              position: 'center',
              type: 'success',
              title: 'Товар добавлен',
              showConfirmButton: false,
              timer: 1500
            });
            $('.nav-menu__cart').hide();
            $('span.cartajax').html(result).addClass('animated bounceIn');
        }
    });
});


$( document ).ready(function() {
    $(document).on("click",'.product_box .pack a',function(){

        $('.product_box .product_img').html('<div align="center" style="margin:0 auto; display:block; width:300px; height:300px; background-image:url(/img/load.gif); background-position:center center; background-repeat:no-repeat; background-color:#ffffff;">&nbsp;</div>');
        
        var ww=$.ajax({
            type:"GET",
            cache:false,
            url:$(this).attr('href'),
            global:false,
            dataType:"text",
            success:function(data){
                //Цвет
                $('.product_box .color ul').html($(data).find('.product_box .color ul').html());
                //Спецификация
                $('div[id=specification] .row').html($(data).find('div[id=specification] .row').html());
                    
                
                setTimeout(function(){
                    
                    //Комплектация со Стулом или без
                    $('.product_box .option').html($(data).find('.product_box .option').html());
                    //Картинка со стулом или без
                    $('.product_box .product_img').html($(data).find('.product_box .product_img').html());

                    
                    
                    $('h1[itemprop=name]').html($(data).find('h1[itemprop=name]').html());
                    $('.product_buy p.bf').html($(data).find('.product_buy p.bf').html());
                    $('.product_buy p.price').html($(data).find('.product_buy p.price').html());
                    $('.product_buy .oplata p span').html($(data).find('.product_buy .oplata p span').html());
                    $('form[id=add]').html($(data).find('form[id=add]').html());

                    gallery = $('.gallery a').simpleLightbox();
                },600);
            },
            });
        if(ww){return false;}
        else{return true;}
    });


    var gallery = $('.gallery a').simpleLightbox();
    var gallery_otziv = $('.gallery_otziv .gallery_item').simpleLightbox();


    $(".file-upload input[type=file]").change(function(){
        var filename = $(this).val().replace(/.*\\/, "");
        $("#filename").val(filename);
        $(".file-upload span").hide();
    });

    //MASKED PHONE
    function getPasteEvent() {
        var el = document.createElement('input'),
            name = 'onpaste';
        el.setAttribute(name, '');
        return (typeof el[name] === 'function')?'paste':'input';             
    }

    var pasteEventName = getPasteEvent() + ".mask",
        ua = navigator.userAgent,
        iPhone = /iphone/i.test(ua),
        android=/android/i.test(ua),
        caretTimeoutId;

    $.mask = {
        //Predefined character definitions
        definitions: {
            '9': "[0-9]",
            'a': "[A-Za-z]",
            '*': "[A-Za-z0-9]"
        },
        dataName: "rawMaskFn",
        placeholder: '_',
    };

    $.fn.extend({
        //Helper Function for Caret positioning
        caret: function(begin, end) {
            var range;

            if (this.length === 0 || this.is(":hidden")) {
                return;
            }

            if (typeof begin == 'number') {
                end = (typeof end === 'number') ? end : begin;
                return this.each(function() {
                    if (this.setSelectionRange) {
                        this.setSelectionRange(begin, end);
                    } else if (this.createTextRange) {
                        range = this.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', end);
                        range.moveStart('character', begin);
                        range.select();
                    }
                });
            } else {
                if (this[0].setSelectionRange) {
                    begin = this[0].selectionStart;
                    end = this[0].selectionEnd;
                } else if (document.selection && document.selection.createRange) {
                    range = document.selection.createRange();
                    begin = 0 - range.duplicate().moveStart('character', -100000);
                    end = begin + range.text.length;
                }
                return { begin: begin, end: end };
            }
        },
        unmask: function() {
            return this.trigger("unmask");
        },
        mask: function(mask, settings) {
            var input,
                defs,
                tests,
                partialPosition,
                firstNonMaskPos,
                len;

            if (!mask && this.length > 0) {
                input = $(this[0]);
                return input.data($.mask.dataName)();
            }
            settings = $.extend({
                placeholder: $.mask.placeholder, // Load default placeholder
                completed: null
            }, settings);


            defs = $.mask.definitions;
            tests = [];
            partialPosition = len = mask.length;
            firstNonMaskPos = null;

            $.each(mask.split(""), function(i, c) {
                if (c == '?') {
                    len--;
                    partialPosition = i;
                } else if (defs[c]) {
                    tests.push(new RegExp(defs[c]));
                    if (firstNonMaskPos === null) {
                        firstNonMaskPos = tests.length - 1;
                    }
                } else {
                    tests.push(null);
                }
            });

            return this.trigger("unmask").each(function() {
                var input = $(this),
                    buffer = $.map(
                    mask.split(""),
                    function(c, i) {
                        if (c != '?') {
                            return defs[c] ? settings.placeholder : c;
                        }
                    }),
                    focusText = input.val();

                function seekNext(pos) {
                    while (++pos < len && !tests[pos]);
                    return pos;
                }

                function seekPrev(pos) {
                    while (--pos >= 0 && !tests[pos]);
                    return pos;
                }

                function shiftL(begin,end) {
                    var i,
                        j;

                    if (begin<0) {
                        return;
                    }

                    for (i = begin, j = seekNext(end); i < len; i++) {
                        if (tests[i]) {
                            if (j < len && tests[i].test(buffer[j])) {
                                buffer[i] = buffer[j];
                                buffer[j] = settings.placeholder;
                            } else {
                                break;
                            }

                            j = seekNext(j);
                        }
                    }
                    writeBuffer();
                    input.caret(Math.max(firstNonMaskPos, begin));
                }

                function shiftR(pos) {
                    var i,
                        c,
                        j,
                        t;

                    for (i = pos, c = settings.placeholder; i < len; i++) {
                        if (tests[i]) {
                            j = seekNext(i);
                            t = buffer[i];
                            buffer[i] = c;
                            if (j < len && tests[j].test(t)) {
                                c = t;
                            } else {
                                break;
                            }
                        }
                    }
                }

                function keydownEvent(e) {
                    var k = e.which,
                        pos,
                        begin,
                        end;

                    //backspace, delete, and escape get special treatment
                    if (k === 8 || k === 46 || (iPhone && k === 127)) {
                        pos = input.caret();
                        begin = pos.begin;
                        end = pos.end;

                        if (end - begin === 0) {
                            begin=k!==46?seekPrev(begin):(end=seekNext(begin-1));
                            end=k===46?seekNext(end):end;
                        }
                        clearBuffer(begin, end);
                        shiftL(begin, end - 1);

                        e.preventDefault();
                    } else if (k == 27) {//escape
                        input.val(focusText);
                        input.caret(0, checkVal());
                        e.preventDefault();
                    }
                }

                function keypressEvent(e) {
                    var k = e.which,
                        pos = input.caret(),
                        p,
                        c,
                        next;

                    if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {//Ignore
                        return;
                    } else if (k) {
                        if (pos.end - pos.begin !== 0){
                            clearBuffer(pos.begin, pos.end);
                            shiftL(pos.begin, pos.end-1);
                        }

                        p = seekNext(pos.begin - 1);
                        if (p < len) {
                            c = String.fromCharCode(k);
                            if (tests[p].test(c)) {
                                shiftR(p);

                                buffer[p] = c;
                                writeBuffer();
                                next = seekNext(p);

                                if(android){
                                    setTimeout($.proxy($.fn.caret,input,next),0);
                                }else{
                                    input.caret(next);
                                }

                                if (settings.completed && next >= len) {
                                    settings.completed.call(input);
                                }
                            }
                        }
                        e.preventDefault();
                    }
                }

                function clearBuffer(start, end) {
                    var i;
                    for (i = start; i < end && i < len; i++) {
                        if (tests[i]) {
                            buffer[i] = settings.placeholder;
                        }
                    }
                }

                function writeBuffer() { input.val(buffer.join('')); }

                function checkVal(allow) {
                    //try to place characters where they belong
                    var test = input.val(),
                        lastMatch = -1,
                        i,
                        c;

                    for (i = 0, pos = 0; i < len; i++) {
                        if (tests[i]) {
                            buffer[i] = settings.placeholder;
                            while (pos++ < test.length) {
                                c = test.charAt(pos - 1);
                                if (tests[i].test(c)) {
                                    buffer[i] = c;
                                    lastMatch = i;
                                    break;
                                }
                            }
                            if (pos > test.length) {
                                break;
                            }
                        } else if (buffer[i] === test.charAt(pos) && i !== partialPosition) {
                            pos++;
                            lastMatch = i;
                        }
                    }
                    if (allow) {
                        writeBuffer();
                    } else if (lastMatch + 1 < partialPosition) {
                        input.val("");
                        clearBuffer(0, len);
                    } else {
                        writeBuffer();
                        input.val(input.val().substring(0, lastMatch + 1));
                    }
                    return (partialPosition ? i : firstNonMaskPos);
                }

                input.data($.mask.dataName,function(){
                    return $.map(buffer, function(c, i) {
                        return tests[i]&&c!=settings.placeholder ? c : null;
                    }).join('');
                });

                if (!input.attr("readonly"))
                    input
                    .one("unmask", function() {
                        input
                            .unbind(".mask")
                            .removeData($.mask.dataName);
                    })
                    .bind("focus.mask", function() {
                        clearTimeout(caretTimeoutId);
                        var pos,
                            moveCaret;

                        focusText = input.val();
                        pos = checkVal();
                        
                        caretTimeoutId = setTimeout(function(){
                            writeBuffer();
                            if (pos == mask.length) {
                                input.caret(0, pos);
                            } else {
                                input.caret(pos);
                            }
                        }, 10);
                    })
                    .bind("blur.mask", function() {
                        checkVal();
                        if (input.val() != focusText)
                            input.change();
                    })
                    .bind("keydown.mask", keydownEvent)
                    .bind("keypress.mask", keypressEvent)
                    .bind(pasteEventName, function() {
                        setTimeout(function() { 
                            var pos=checkVal(true);
                            input.caret(pos); 
                            if (settings.completed && pos == input.val().length)
                                settings.completed.call(input);
                        }, 0);
                    });
                checkVal(); //Perform initial check for existing values
            });
        }
    });

    $(".phone_mask").mask("8-999-999-99-99");
});